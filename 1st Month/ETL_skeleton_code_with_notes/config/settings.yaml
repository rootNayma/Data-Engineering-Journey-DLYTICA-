
# What is settings.yaml ??

# Think of it like:
# Your Python code = the engine
# Your settings.yaml = the control panel switches & dials


# The engine (Python) reads the control panel (YAML) to know:
# Where to fetch data from (CSV? API? DB?)
# How much data to fetch at a time
# Where to put it in the database
# What rules to follow when loading (insert vs update)

# This YAML is organized into 3 main sections:
# 1) run: → general pipeline settings.
# 2) sources: → details about where to extract data from.
# 3) load: → details about how to load into the database.

Think of it as control knobs for your ETL.


run:
  batch_size: 500                                                               # → process data in chunks of 500 rows at a time (not all at once).
  max_retries: 5                                                                # → if something fails (like API call), try again up to 5 times.
  backoff_seconds: 2                                                            # → wait 2 seconds before retrying.
  target_table: public.customers_stg                                            # → the database table where cleaned data will go.


sources:                                                                        # This describes where the data is coming from.
  file:
    path: "/data/input/customers.csv"                                           # → input CSV file, meaning from this path the data is extracted
    fmt: "csv"                                                                  # → format is CSV.


  api:
    endpoint: "/launches"                                                       # → This is the path of the API you want to fetch data from. Usually, it attaches to the base URL from your .env file.
    page_param: "page"                                                          # → Many APIs don’t give all data at once (too big).
                                                                                #   Instead, they give results in pages (like a book).
                                                                                #   This tells your ETL: “When I call this API, I must pass a page parameter to ask for which page.”
    per_page_param: "limit"                                                     # → API uses limit to say how many rows per page.
    per_page: 100                                                               # → fetch 100 rows at a time.
  db:
    query: "SELECT * from public.customers where updated_at >= :since LIMIT :limit OFFSET :offset"  #  → SQL query to pull data from an existing database.


load:
  mode: "upsert"                                                                # “Upsert” = UPDATE + INSERT. it will update and insert if the condition is true
                                                                                # ETL sees upsert and key_column: ["customer_id"]
                                                                                # then it checks: “Does customer_id = 1 exist?”
                                                                                # No → insert Alice
                                                                                # Yes → Updates.
  key_column: ["customer_id"]
